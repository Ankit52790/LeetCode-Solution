class Solution {
class Position{
int val;
int direction;
Position(int val, int direction){
this.val = val;
this.direction = direction;
}
@Override
public String toString(){
return this.val + " " + this.direction;
}
}
public int minimumJumps(int[] forbidden, int a, int b, int x) {
if(x==0){
return 0;
}
int steps = 0;
int furthest = 10000;
Set<Integer> forbiddenSpots = new HashSet();
Set<String> visitedSet = new HashSet<>();
for(int i=0; i<forbidden.length; i++){
forbiddenSpots.add(forbidden[i]);
}
Queue<Position> queue = new LinkedList();
queue.add(new Position(0,0));
visitedSet.add(0+"-"+0);
steps++;
// BFS Starts
while(!queue.isEmpty()){
int size = queue.size();
for(int i=0; i<size; i++){
Position current_position = queue.poll();
int next_a = current_position.val +a;
if(next_a == x){
return steps;
}
if(next_a>=0 && next_a<= furthest && !forbiddenSpots.contains(next_a) && 
visitedSet.add(next_a + "-"+ 1)){
queue.add(new Position(next_a,1));
}
if(current_position.direction==1){
int next_b = current_position.val-b;
if(next_b==x){
return steps;
}
if(next_b>=0 && next_b<=furthest && !forbiddenSpots.contains(next_b) 
&& visitedSet.add(next_b + "-"+a)){
queue.add(new Position(next_b, 0));
}
}
}
steps++;
}
return -1;
}
}
